// <auto-generated />
using System;
using ISPSystem.EF.Connections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ISPSystem.EF.Migrations
{
    [DbContext(typeof(Connection))]
    [Migration("20210110020819_Tabela_Questao_E_Seeds")]
    partial class Tabela_Questao_E_Seeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ISPSystem.DomainEntities.Carteira", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Composicao");

                    b.Property<string>("Descricao");

                    b.Property<int>("PerfilID");

                    b.HasKey("ID");

                    b.HasIndex("PerfilID")
                        .IsUnique();

                    b.ToTable("Carteira");

                    b.HasData(
                        new { ID = 1, Composicao = "100% Renda Fixa", Descricao = "MAX Renda Fixa", PerfilID = 1 },
                        new { ID = 2, Composicao = "50% Renda Fixa e 50% Renda Variável", Descricao = "MIX Renda Fixa/Renda Variável", PerfilID = 2 },
                        new { ID = 3, Composicao = "100% Renda Variável", Descricao = "MAX Renda Variável", PerfilID = 3 }
                    );
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Participante", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarteiraID");

                    b.Property<int>("Idade");

                    b.Property<string>("Nome");

                    b.Property<int?>("PerfilID");

                    b.HasKey("ID");

                    b.HasIndex("CarteiraID")
                        .IsUnique()
                        .HasFilter("[CarteiraID] IS NOT NULL");

                    b.HasIndex("PerfilID")
                        .IsUnique()
                        .HasFilter("[PerfilID] IS NOT NULL");

                    b.ToTable("Participante");
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Perfil", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.Property<int>("Pontuacao");

                    b.HasKey("ID");

                    b.ToTable("Perfil");

                    b.HasData(
                        new { ID = 1, Descricao = "Conservador", Pontuacao = 20 },
                        new { ID = 2, Descricao = "Moderado", Pontuacao = 30 },
                        new { ID = 3, Descricao = "Agressivo", Pontuacao = 40 }
                    );
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Questao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("ID");

                    b.ToTable("Questao");

                    b.HasData(
                        new { ID = 1, Descricao = "Quanto de interesse você tem em investir em renda variável para o longo prazo?" },
                        new { ID = 2, Descricao = "Quanto de interesse você tem em investir em ativos de renda fixa para o longo prazo?" },
                        new { ID = 3, Descricao = "Quanto de interese você tem em investir em títulos públicos para o longo prazo?" },
                        new { ID = 4, Descricao = "Para o longo prazo e sua aposentadoria, você aceitaria o risco maior da renda variável?" },
                        new { ID = 5, Descricao = "Para o longo prazo e sua aposentadoria, você prefere se expor menos a riscos e ficar mais na renda fixa?" }
                    );
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Rentabilidade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano");

                    b.Property<int>("CarteiraID");

                    b.Property<string>("Mes");

                    b.HasKey("ID");

                    b.HasIndex("CarteiraID");

                    b.ToTable("Rentabilidade");
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Solicitacao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParticipanteID");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("ParticipanteID");

                    b.ToTable("Solicitacao");
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Carteira", b =>
                {
                    b.HasOne("ISPSystem.DomainEntities.Perfil", "Perfil")
                        .WithOne("Carteira")
                        .HasForeignKey("ISPSystem.DomainEntities.Carteira", "PerfilID")
                        .HasConstraintName("FK_Carteira_Perfil")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Participante", b =>
                {
                    b.HasOne("ISPSystem.DomainEntities.Carteira", "Carteira")
                        .WithOne("Participante")
                        .HasForeignKey("ISPSystem.DomainEntities.Participante", "CarteiraID")
                        .HasConstraintName("FK_Participante_Carteira");

                    b.HasOne("ISPSystem.DomainEntities.Perfil", "Perfil")
                        .WithOne("Participante")
                        .HasForeignKey("ISPSystem.DomainEntities.Participante", "PerfilID")
                        .HasConstraintName("FK_Participante_Perfil");
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Rentabilidade", b =>
                {
                    b.HasOne("ISPSystem.DomainEntities.Carteira", "Carteira")
                        .WithMany("Rentabilidades")
                        .HasForeignKey("CarteiraID")
                        .HasConstraintName("FK_Rentabilidade_Carteira")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ISPSystem.DomainEntities.Solicitacao", b =>
                {
                    b.HasOne("ISPSystem.DomainEntities.Participante", "Participante")
                        .WithMany("Solicitacoes")
                        .HasForeignKey("ParticipanteID")
                        .HasConstraintName("FK_Solicitacao_Participante")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
